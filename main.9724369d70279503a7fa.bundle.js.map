{"version":3,"file":"main.9724369d70279503a7fa.bundle.js","sources":["webpack:///./src/old.js"],"sourcesContent":["import React, { Component } from 'react'\nimport infoDevice from '../src/utils/infoDevice'\n\nconst STANDARD_FADE_MILLIS = 350;\nconst STANDARD_PERC_BIGGER = 10;\nconst zIndexPopup = 1500;\n\nconst imageZoomableStyle = {\n  display: 'inline-block',\n  position: 'relative'\n}\n\nexport default class ImageZoomable extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.fadeMillis = this.props.fadeInMillis || STANDARD_FADE_MILLIS;\n    this.percBigger = (this.props.percBigger === null || this.props.percBigger === undefined) ? STANDARD_PERC_BIGGER : this.props.percBigger;\n\n    this.state = {\n      fullScreen: false,\n      translateX: 0,\n      translateY: 0,\n      hqLoaded: false,\n      downloadingHq: false,\n      naturalDimension: null\n    }\n  }\n\n  handleMouseMove(halfScreenX, halfScreenY, event) {\n    if (!this.state.fullScreen)\n      return false;\n\n    event = event || window.event;\n\n    let percFromHalfScreenX = - (halfScreenX - event.pageX) / halfScreenX * 100;\n    let percFromHalfScreenY = - (halfScreenY - event.pageY) / halfScreenY * 100;\n\n    this.setTranslatedPos(percFromHalfScreenX, percFromHalfScreenY);\n  }\n\n  handleTouchMove(halfScreenX, halfScreenY, event) {\n    if (!this.state.fullScreen)\n      return false;\n\n    let touchobj = event.changedTouches[0];\n\n    let percFromHalfScreenX = - (halfScreenX - touchobj.clientX) / halfScreenX * 100;\n    let percFromHalfScreenY = - (halfScreenY - touchobj.clientY) / halfScreenY * 100;\n\n    this.setTranslatedPos(percFromHalfScreenX, percFromHalfScreenY);\n  }\n\n  setTranslatedPos(percFromHalfScreenX, percFromHalfScreenY) {\n    this.setState({\n      translateX: this.newLeft * percFromHalfScreenX / 100,\n      translateY: - (this.newTop * percFromHalfScreenY) / 100\n    });\n  }\n\n  componentDidMount() {\n    let halfScreenX = window.innerWidth / 2;\n    let halfScreenY = window.innerHeight / 2;\n\n\n    if (infoDevice.isTouchOnly()) {\n      document.addEventListener('touchmove', this.handleTouchMove.bind(this, halfScreenX, halfScreenY));\n    } else {\n      document.addEventListener('mousemove', this.handleMouseMove.bind(this, halfScreenX, halfScreenY));\n    }\n  }\n\n  componentWillUnmount() {\n    if ('touchmove' in document.documentElement)\n      document.removeEventListener('touchmove', this.handlerMouseMove);\n    if ('mousemove' in document.documentElement)\n      document.removeEventListener('touchmove', this.handlerMouseMove);\n  }\n\n  render() {\n\n    if (!this.state.fullScreen) {\n\n      return (\n        <div style={imageZoomableStyle} className=\"image-zoomable\">\n          {this.renderNormal()}\n        </div>\n      );\n\n    } else {\n\n      const fullScreenContainerStyle = {\n        position: 'fixed',\n        boxSizing: 'border-box',\n        opacity: this.state.hqLoaded ? '1' : '0',\n        transition: `opacity ${this.fadeMillis / 1000}s ease-in-out`,\n        zIndex: zIndexPopup,\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0\n      }\n\n      return (\n        <div style={imageZoomableStyle} className=\"image-zoomable\">\n          {this.renderNormal()}\n          <div className=\"image-zoomable--fullscreen\" style={fullScreenContainerStyle}\n            onTransitionEnd={this.handleFullContainerTransitionEnd.bind(this)}>\n            {this.renderFullScreen()}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  renderNormal() {\n\n    const imgStyle = {\n      opacity: this.state.hqLoaded ? '0' : '1',\n      transition: `opacity ${this.fadeMillis / 1000}s ease-in-out`,\n      maxWidth: '100%'\n    }\n    return (\n      <div className=\"image-zoomable--normal\">\n        <img src={this.props.uri} style={imgStyle} onClick={this.toogleZoom.bind(this)} />\n      </div>\n    );\n  }\n\n  renderFullScreen() {\n\n    if (!this.state.naturalDimension) {\n      return <img onClick={this.toogleZoom.bind(this)} ref=\"imgFullScreen\" src={this.props.uriHD} onLoad={this.handleImageLoaded.bind(this)} />\n    }\n\n    let screeRatio = window.innerWidth / window.innerHeight;\n    let imgRatio = this.state.naturalDimension.n_width / this.state.naturalDimension.n_height;\n\n    let newImgWidth, newImgHeight, unitIncrease;\n\n    // rS > rI ? (iW*sW/iH,sH) : (sW,iH*sW/iW)\n    if (screeRatio > imgRatio) {\n\n      newImgWidth = this.state.naturalDimension.n_width * window.innerHeight / this.state.naturalDimension.n_height;\n      newImgHeight = window.innerHeight;\n      unitIncrease = window.innerWidth / newImgWidth;\n\n    } else {\n\n      newImgWidth = window.innerWidth;\n      newImgHeight = this.state.naturalDimension.n_height * window.innerWidth / this.state.naturalDimension.n_width;\n      unitIncrease = window.innerHeight / newImgHeight;\n\n    }\n\n    newImgWidth = (newImgWidth * unitIncrease) * (100 + this.percBigger) / 100;\n    newImgHeight = newImgHeight * unitIncrease * (100 + this.percBigger) / 100;\n\n    // for debug this ratio must be equals to initial imgRatio \n    // let newRatio = newImgWidth / newImgHeight;\n\n    let newLeft = - (newImgWidth - window.innerWidth) / 2;\n    let newTop = (newImgHeight - window.innerHeight) / 2;\n\n    if (!this.newLeft) {\n      this.newLeft = newLeft;\n    }\n    if (!this.newTop) {\n      this.newTop = newTop;\n    }\n\n    let imgStyle = {\n      top: - newTop,\n      left: newLeft,\n      width: newImgWidth,\n      height: newImgHeight,\n      transform: `translate(${this.state.translateX}px,${this.state.translateY}px)`,\n      border: this.props.debug ? '10px solid red' : 'none',\n      maxWidth: 'none',\n      position: 'absolute',\n      right: 0,\n      zIndex: zIndexPopup,\n      willChange: 'transform',\n      boxSizing: 'border-box'\n    }\n\n    return (\n      <img onClick={this.toogleZoom.bind(this)} ref=\"imgFullScreen\" style={imgStyle} src={this.props.uriHD} onLoad={this.handleImageLoaded.bind(this)} />\n    );\n\n  }\n\n  handleImageLoaded() {\n\n    var naturalDimension = null;\n\n    // probably is alread defined when this method is called\n    if (this.refs.imgFullScreen) {\n      naturalDimension = {\n        n_width: this.refs.imgFullScreen.naturalWidth,\n        n_height: this.refs.imgFullScreen.naturalHeight\n      }\n    }\n\n    this.setState({\n      hqLoaded: true,\n      downloadingHq: false,\n      naturalDimension: naturalDimension || null\n    });\n  }\n\n  handleFullContainerTransitionEnd() {\n    if (!this.state.hqLoaded)\n      this.setState({ fullScreen: false });\n  }\n\n  toogleZoom() {\n\n    if (!this.state.fullScreen) {\n      this.setState({\n        fullScreen: true,\n        downloadingHq: true\n      });\n    } else {\n      this.setState({ hqLoaded: false });\n    }\n  }\n}\n"],"mappings":"AAGA","sourceRoot":""}